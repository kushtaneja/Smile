//
//  CustomIcons.swift
//  CalendarKitDemo
//
//  Created by Kush Taneja on 01/03/17.
//  Copyright Â© 2017 Hyper. All rights reserved.
//

import UIKit
import Darwin

@IBDesignable
public class CustomCrossIcon: UIView {

    var backgroundFillColor: UIColor = UIColor.red
    var strokeColor: UIColor = UIColor.white
    
    override public init(frame: CGRect){
        super.init(frame: frame)
    }
    
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override public func draw(_ rect: CGRect) {
        
        let path = UIBezierPath(ovalIn: rect)
        backgroundFillColor.setFill()
        path.fill()
        
        //set up the width and height variables
        //for the horizontal stroke
        let plusHeight: CGFloat = 10.0
        let plusWidth: CGFloat = min(bounds.width, bounds.height) * 0.4
        
        //create the path
        var plusPath = UIBezierPath()
        
        //set the path's line width to the height of the stroke
        plusPath.lineWidth = plusHeight
        
        //move the initial point of the path
        //to the start of the horizontal stroke
        plusPath.move(to: CGPoint(
            x:bounds.width/2 - plusWidth/2,
            y:bounds.height/2 - plusWidth/sqrt(2)))
        
        //add a point to the path at the end of the stroke
        plusPath.addLine(to: CGPoint(
            x:bounds.width/2 + plusWidth/2,
            y:bounds.height/2 + plusWidth/sqrt(2)))
        
        
        plusPath.move(to: CGPoint(
            x:bounds.width/2 + plusWidth/2,
            y:bounds.height/2 - plusWidth/sqrt(2)))
        
        //add a point to the path at the end of the stroke
        plusPath.addLine(to: CGPoint(
            x:bounds.width/2 - plusWidth/2,
            y:bounds.height/2 + plusWidth/sqrt(2)))
        
        //set the stroke color
        strokeColor.setStroke()
        
        //draw the stroke
        plusPath.stroke()
    }
    
}
@IBDesignable
open class CustomCheckIcon: UIView {
    
    override public init(frame: CGRect){
        super.init(frame: frame)
    }
    
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override open func draw(_ rect: CGRect) {
        var backgroundFillColor: UIColor = UIColor.blue
        var strokeColor: UIColor = UIColor.white
        
        let path = UIBezierPath(ovalIn: rect)
        backgroundFillColor.setFill()
        path.fill()
        
        //set up the width and height variables
        //for the horizontal stroke
        let plusHeight: CGFloat = 10.0
        let plusWidth: CGFloat = min(bounds.width, bounds.height) * 0.4
        
        //create the path
        var plusPath = UIBezierPath()
        
        //set the path's line width to the height of the stroke
        plusPath.lineWidth = plusHeight
        
        //move the initial point of the path
        //to the start of the horizontal stroke
        plusPath.move(to: CGPoint(
            x:bounds.width/6,
            y:bounds.height/2))
        
        //add a point to the path at the end of the stroke
        plusPath.addLine(to: CGPoint(
            x:5*(bounds.width)/12,
            y:19*(bounds.height/24)))
        

        
        plusPath.move(to: CGPoint(
            x:5*(bounds.width)/12-(5/sqrt(2)),
            y:19*(bounds.height/24)-(5/sqrt(2))))
        
        plusPath.addLine(to: CGPoint(
            x:7*(bounds.width)/8,
            y:(bounds.height)/4+(5/sqrt(2))))
        
        //set the stroke color
        strokeColor.setStroke()
        
        //draw the stroke
        plusPath.stroke()
    }
    
}
@IBDesignable
open class AppleLogo: UIView {
    
    override public init(frame: CGRect){
        super.init(frame: frame)
    }
    
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override open func draw(_ rect: CGRect) {
        
        // This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
        // http://www.paintcodeapp.com
        
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 178.48, y: 157.96))
        bezierPath.addCurve(to: CGPoint(x: 206.75, y: 200.61), controlPoint1: CGPoint(x: 178.78, y: 189.86), controlPoint2: CGPoint(x: 206.44, y: 200.47))
        bezierPath.addCurve(to: CGPoint(x: 192.17, y: 230.58), controlPoint1: CGPoint(x: 206.52, y: 201.36), controlPoint2: CGPoint(x: 202.33, y: 215.73))
        bezierPath.addCurve(to: CGPoint(x: 159.93, y: 256.48), controlPoint1: CGPoint(x: 183.4, y: 243.42), controlPoint2: CGPoint(x: 174.28, y: 256.21))
        bezierPath.addCurve(to: CGPoint(x: 125.17, y: 248.11), controlPoint1: CGPoint(x: 145.83, y: 256.74), controlPoint2: CGPoint(x: 141.29, y: 248.11))
        bezierPath.addCurve(to: CGPoint(x: 90.66, y: 256.74), controlPoint1: CGPoint(x: 109.05, y: 248.11), controlPoint2: CGPoint(x: 104.01, y: 256.21))
        bezierPath.addCurve(to: CGPoint(x: 57.41, y: 230.06), controlPoint1: CGPoint(x: 76.81, y: 257.26), controlPoint2: CGPoint(x: 66.26, y: 242.85))
        bezierPath.addCurve(to: CGPoint(x: 44.06, y: 123.88), controlPoint1: CGPoint(x: 39.32, y: 203.9), controlPoint2: CGPoint(x: 25.5, y: 156.13))
        bezierPath.addCurve(to: CGPoint(x: 87.64, y: 97.46), controlPoint1: CGPoint(x: 53.28, y: 107.86), controlPoint2: CGPoint(x: 69.76, y: 97.72))
        bezierPath.addCurve(to: CGPoint(x: 122.4, y: 106.62), controlPoint1: CGPoint(x: 101.24, y: 97.2), controlPoint2: CGPoint(x: 114.08, y: 106.62))
        bezierPath.addCurve(to: CGPoint(x: 162.72, y: 96.96), controlPoint1: CGPoint(x: 130.71, y: 106.62), controlPoint2: CGPoint(x: 146.32, y: 95.3))
        bezierPath.addCurve(to: CGPoint(x: 201.24, y: 117.87), controlPoint1: CGPoint(x: 169.59, y: 97.25), controlPoint2: CGPoint(x: 188.87, y: 99.74))
        bezierPath.addCurve(to: CGPoint(x: 178.48, y: 157.96), controlPoint1: CGPoint(x: 200.25, y: 118.48), controlPoint2: CGPoint(x: 178.24, y: 131.3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 151.98, y: 79.65))
        bezierPath.addCurve(to: CGPoint(x: 162.93, y: 46), controlPoint1: CGPoint(x: 159.33, y: 70.74), controlPoint2: CGPoint(x: 164.28, y: 58.34))
        bezierPath.addCurve(to: CGPoint(x: 131.91, y: 61.97), controlPoint1: CGPoint(x: 152.33, y: 46.43), controlPoint2: CGPoint(x: 139.51, y: 53.07))
        bezierPath.addCurve(to: CGPoint(x: 120.73, y: 94.57), controlPoint1: CGPoint(x: 125.09, y: 69.86), controlPoint2: CGPoint(x: 119.12, y: 82.48))
        bezierPath.addCurve(to: CGPoint(x: 151.98, y: 79.65), controlPoint1: CGPoint(x: 132.55, y: 95.49), controlPoint2: CGPoint(x: 144.62, y: 88.56))
        bezierPath.close()
        fillColor.setStroke()
        bezierPath.lineWidth = 2.0
        bezierPath.miterLimit = 4
        bezierPath.stroke()
 
    }

}

